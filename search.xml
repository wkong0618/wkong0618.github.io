<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java try-with-resource</title>
    <url>/2019/12/24/java-try-with-resource/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java中外部资源无法使用JVM垃圾回收机制回收,例如数据库连接、网络连接、文件等，因此使用完这些资源需要手动关闭。</p>
<a id="more"></a>
<h2 id="Java-SE-7-之前关闭外部资源"><a href="#Java-SE-7-之前关闭外部资源" class="headerlink" title="Java SE 7 之前关闭外部资源"></a>Java SE 7 之前关闭外部资源</h2><p>无论是try语句是正常还是异常完成，finally都会确保关闭资源,如下例子:<br><strong>例一:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">list</span><span class="params">(String filePath, Integer start, Integer limit)</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        Stream&lt;String&gt; stream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stream = Files.lines(Paths.get(file.getPath()));</span><br><span class="line">            <span class="keyword">return</span>  stream.skip(start).limit(limit).collect(Collectors.toList());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"exception--&gt;fileName:&#123;&#125; error:&#123;&#125;"</span>, file.getName(), e.getMessage());</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> != stream)&#123;</span><br><span class="line">                stream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从例一看到，try中stream操作异常和finally中close都抛出异常,那么方法则抛出finally异常，从try块中抛出的异常将被抑制。</p>
<h2 id="Java-SE-7-及之后关闭外部资源新方法"><a href="#Java-SE-7-及之后关闭外部资源新方法" class="headerlink" title="Java SE 7 及之后关闭外部资源新方法"></a>Java SE 7 及之后关闭外部资源新方法</h2><p>在Java SE 7 及之后, java提供了另外一种语法来关闭资源，使用try-with-resources语句，先来下例一使用此语句的写法。<br><strong>例二:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">list</span><span class="params">(String filePath, Integer start, Integer limit)</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">try</span> (Stream&lt;String&gt; stream  = Files.lines(Paths.get(file.getPath())))&#123;</span><br><span class="line">            <span class="keyword">return</span>  stream.skip(start).limit(limit).collect(Collectors.toList());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"exception--&gt;fileName:&#123;&#125; error:&#123;&#125;"</span>, file.getName(), e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到例二看起来比例一简洁了很多。try后面的括号里面的资源是Stream(jdk1.8标准库中提供的类)，Files.lines(jdk1.8中提供的方法)方法从文件中读取所有的内容返回Stream<String>。因为Stream是在try-with-resources语句中声明，无论try语句是正常完成还是异常停止的话，资源都会被关闭。</p>
<p>我们打开Stream类，可以看到类的注解上有这么一段注释:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Streams have a &#123;@link #close()&#125; method and implement &#123;@link AutoCloseable&#125;,</span><br><span class="line">* but nearly all stream instances <span class="keyword">do</span> not actually need to be closed after use.</span><br><span class="line">* Generally, <span class="function">only streams whose source is an IO <span class="title">channel</span> <span class="params">(such as those returned</span></span></span><br><span class="line"><span class="function"><span class="params">* by &#123;@link Files#lines(Path, Charset)</span>&#125;) will require closing.  Most streams</span></span><br><span class="line"><span class="function">* are backed by collections, arrays, or generating functions, which require no</span></span><br><span class="line"><span class="function">* special resource management.  <span class="params">(If a stream does require closing, it can be</span></span></span><br><span class="line"><span class="function"><span class="params">* declared as a resource in a &#123;@code <span class="keyword">try</span>&#125;-with-resources statement.)</span></span></span><br></pre></td></tr></table></figure>

<p>可以看出file.lines是需要关闭流的，并且建议我们可以声明为try-with-resources来关闭文件(就像我们例二中的例子)。</p>
<p>另外我们看到Stream这个类继承了AutoCloseable。</p>
<p>那么try-with-resource语句是怎么在打开声明的资源后进行关闭的。我们进入Files.lines方法看一下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;String&gt; <span class="title">lines</span><span class="params">(Path path, Charset cs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   BufferedReader br = Files.newBufferedReader(path, cs);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> br.lines().onClose(asUncheckedRunnable(br));</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Error|RuntimeException e) &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           br.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               e.addSuppressed(ex);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;&#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">throw</span> e;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们看到br.lines()返回Stream<String>, 后面调用了onClose()方法，onClose方法参数是close handler。我们看下参数代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Convert a Closeable to a Runnable by converting checked IOException</span></span><br><span class="line"><span class="comment">* to UncheckedIOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Runnable <span class="title">asUncheckedRunnable</span><span class="params">(Closeable c)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           c.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> UncheckedIOException(e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到onClose方法为返回的Stream设置了close handler, 在close handler里面调用了close方法来关闭文件。</p>
<p>再来看下onClose方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns an equivalent stream with an additional close handler.  Close</span></span><br><span class="line"><span class="comment">* handlers are run when the &#123;<span class="doctag">@link</span> #close()&#125; method</span></span><br><span class="line"><span class="comment">* is called on the stream, and are executed in the order they were</span></span><br><span class="line"><span class="comment">* added.  All close handlers are run, even if earlier close handlers throw</span></span><br><span class="line"><span class="comment">* exceptions.  If any close handler throws an exception, the first</span></span><br><span class="line"><span class="comment">* exception thrown will be relayed to the caller of &#123;<span class="doctag">@code</span> close()&#125;, with</span></span><br><span class="line"><span class="comment">* any remaining exceptions added to that exception as suppressed exceptions</span></span><br><span class="line"><span class="comment">* (unless one of the remaining exceptions is the same exception as the</span></span><br><span class="line"><span class="comment">* first exception, since an exception cannot suppress itself.)  May</span></span><br><span class="line"><span class="comment">* return itself.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* &lt;p&gt;This is an &lt;a href="package-summary.html#StreamOps"&gt;intermediate</span></span><br><span class="line"><span class="comment">* operation&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> closeHandler A task to execute when the stream is closed</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> a stream with a handler that is run if the stream is closed</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">S <span class="title">onClose</span><span class="params">(Runnable closeHandler)</span></span>;</span><br></pre></td></tr></table></figure>

<p>我们可以看到onClose是流关闭时需要执行的任务，返回的是带有close handler的流，close handler在流关闭的时候执行。</p>
<p>再来看下Stream的close方法，如下所示（Stream的close方法）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Closes this stream, causing all close handlers for this stream pipeline</span></span><br><span class="line"><span class="comment">* to be called.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> AutoCloseable#close()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>注释明确表示了close方法会调用所有的close handlers。<br>至此我们明白了，例二就是返回了带有close handler的Stream,try-with-resource语句会自动调用资源的close方法，会触发所有的close handlers，进而实现了关闭流的操作。</p>
<h2 id="try-with-resource声明多个资源，关闭顺序是怎么样的"><a href="#try-with-resource声明多个资源，关闭顺序是怎么样的" class="headerlink" title="try-with-resource声明多个资源，关闭顺序是怎么样的"></a>try-with-resource声明多个资源，关闭顺序是怎么样的</h2><p>这个我们我们可以从官方文档的例子说明下（下面的例子是从官方文档例子摘抄，可查看下面的参考文档链接）:<br><strong>例三：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeToFileZipFileContents</span><span class="params">(String zipFileName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           String outputFileName)</span></span></span><br><span class="line"><span class="function">                                           <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    java.nio.charset.Charset charset =</span><br><span class="line">         java.nio.charset.StandardCharsets.US_ASCII;</span><br><span class="line">    java.nio.file.Path outputFilePath =</span><br><span class="line">         java.nio.file.Paths.get(outputFileName);</span><br><span class="line">         </span><br><span class="line">    <span class="comment">// Open zip file and create output file with </span></span><br><span class="line">    <span class="comment">// try-with-resources statement</span></span><br><span class="line">    <span class="keyword">try</span> (</span><br><span class="line">        java.util.zip.ZipFile zf =</span><br><span class="line">             <span class="keyword">new</span> java.util.zip.ZipFile(zipFileName);</span><br><span class="line">        java.io.BufferedWriter writer = </span><br><span class="line">            java.nio.file.Files.newBufferedWriter(outputFilePath, charset)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// Enumerate each entry</span></span><br><span class="line">        <span class="keyword">for</span> (java.util.Enumeration entries =</span><br><span class="line">                                zf.entries(); entries.hasMoreElements();) &#123;</span><br><span class="line">            <span class="comment">// Get the entry name and write it to the output file</span></span><br><span class="line">            String newLine = System.getProperty(<span class="string">"line.separator"</span>);</span><br><span class="line">            String zipEntryName =</span><br><span class="line">                 ((java.util.zip.ZipEntry)entries.nextElement()).getName() +</span><br><span class="line">                 newLine;</span><br><span class="line">            writer.write(zipEntryName, <span class="number">0</span>, zipEntryName.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="try-with-resources被抑制的异常"><a href="#try-with-resources被抑制的异常" class="headerlink" title="try-with-resources被抑制的异常"></a>try-with-resources被抑制的异常</h2><p>另外我们再简单提一下异常抑制，在例二中如果try块和try-with-resource语句都发生异常，那么整个方法会抛出try块的异常。try-with-resource语句抛出的异常将会被抑制。在Java SE 7以及更高版本中，可以检索被抑制的异常，可以通过Throwable.getSupressed方法从try块抛出的异常检索被抑制的异常。</p>
<p>我们可以看下例二通过编译生成的.class文件的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">list</span><span class="params">(String filePath, Integer start, Integer limit)</span> </span>&#123;</span><br><span class="line">   File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       Stream&lt;String&gt; stream = Files.lines(Paths.get(file.getPath()));</span><br><span class="line">       Throwable var4 = <span class="keyword">null</span>;</span><br><span class="line">       List var5;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           var5 = (List)stream.skip((<span class="keyword">long</span>)start).limit((<span class="keyword">long</span>)limit).collect(Collectors.toList());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Throwable var15) &#123;</span><br><span class="line">           var4 = var15;</span><br><span class="line">           <span class="keyword">throw</span> var15;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (stream != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (var4 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       stream.close();</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (Throwable var14) &#123;</span><br><span class="line">                       var4.addSuppressed(var14);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   stream.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> var5;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception var17) &#123;</span><br><span class="line">       logger.error(<span class="string">"exception--&gt;fileName:&#123;&#125; error:&#123;&#125;"</span>, file.getName(), var17.getMessage());</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到编译后的代码其实也是使用了finally块，我们来看下var4.addSuppressed(var14)这一行。从这行可以看出try-with-resource关闭资源时抛出的异常并没有丢失，而是添加到了抛出异常的Throwable集合中(List<Throwable> suppressedExceptions)，我们可以通过抛出异常的e.getSuppressed得到被抑制的异常数组。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的讲解我们对the try-with-resources statement有了一定的认识，总结为下面五点：</p>
<p>1.任何实现java.lang.AutoCloseable或者java.io.Closeable（Closeable继承了AutoCloseable）接口都可以作为try-with-resources资源。</p>
<p>2.try-with-resources语句是声明一个或者多个资源的try语句,程序完成该语句会自动调用资源的close方法来确保资源在结束时关闭。</p>
<p>3.try-with-resources会比Java SE 7之前通过finally块进行关闭更加简洁（通过编译后的代码可以看到也是通过fianally来实现的）。</p>
<p>4.try-with-resources声明的资源和try块代码如果都抛出异常，Java SE 7以及后面更高版本，可以通过Throwable.getSupressed检索被抑制的异常。</p>
<p>5.如果try-with-resources声明了多个资源，资源的close方法的调用和资源声明的顺序是相反的。</p>
<blockquote>
<p>参考文档链接：<br><a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html#suppressed-exceptions" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html#suppressed-exceptions</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h4 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
